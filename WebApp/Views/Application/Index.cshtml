@model Services.ServiceModels.PaginatedList<Services.ServiceModels.ApplicationViewModel>
@using Data.Models
@using Services.ServiceModels
@using System.Text.Json;
@using Humanizer
@using static Resources.Constants.SvgIcons

@{
    ViewData["Title"] = "Application List";
    await Html.RenderPartialAsync("_UpdateStatusModal");
    await Html.RenderPartialAsync("_ConfirmWithdrawModal");

    string search = ViewData["Search"] as string;
    string sortBy = ViewData["SortBy"] as string;
    string filterByProgram = ViewData["ProgramFilter"] as string;
    string filterByWorkSetup = ViewData["WorkSetupFilter"] as string;
    string filterByStatus = ViewData["StatusFilter"] as string;


    bool isAdministrative = User.IsInRole("Admin") || User.IsInRole("NLO");
    bool isRecruiter = User.IsInRole("Recruiter");

    string aspAction = "GetAllApplications";

    var programs = ViewBag.Programs as List<Program>;
    var workSetups = ViewBag.WorkSetups as List<SetupType>;
    var statusTypes = ViewBag.AppStatusTypes as List<ApplicationStatusType>;

    int pageIndex = Model.PageIndex;
    bool hasFilters = !string.IsNullOrEmpty(search) ||
        !string.IsNullOrEmpty(filterByProgram) ||
        !string.IsNullOrEmpty(filterByWorkSetup) ||
        !string.IsNullOrEmpty(filterByStatus);

    var sortByCreatedDate = sortBy == "created_asc" ? "created_desc" : "created_asc";
    var sortByTitle = sortBy == "title_asc" ? "title_desc" : "title_asc";
}

<div class="@(User.IsInRole("Applicant") ? "my-20 max-w-7xl max-h-screen min-h-screen mx-auto bg-white rounded-md shadow-md" : "size-full") p-6">
    <div class="flex items-center justify-between">
        <h1 class="pb-8 text-left text-4xl font-bold text-[#7A1515]">
            Job Applications
        </h1>

        <!-- Search Button -->
        <div class="flex items-center space-x-2 pb-8">
            <div class="flex items-center space-x-2">
                @if (hasFilters)
                {
                    <form method="get" asp-action="@aspAction">
                        <button type="submit" class="rounded bg-gray-300 px-2 py-1 text-white">
                            &times;
                        </button>
                    </form>
                }
                <form method="get" asp-action="@aspAction"
                      class="flex items-center space-x-2">
                    @await Component.InvokeAsync("SearchInput", new { searchValue = search, placeholder = "Applicant, address, job title, company" })
                    <input type="hidden" name="sortBy" value="@sortBy" />
                    <input type="hidden" name="programFilter" value="@filterByProgram" />
                    <input type="hidden" name="workSetupFilter" value="@filterByWorkSetup" />
                    <input type="hidden" name="statusFilter" value="@filterByStatus" />
                </form>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="h-[75vh] overflow-auto rounded-lg bg-[#F5F7F8]">
        <div class="flex w-full justify-end bg-white py-2">
            <button onclick="featureUnavailable()"
                    class="flex w-full max-w-[200px] cursor-pointer items-center justify-end text-right text-[#343131] hover:text-[#A04747] focus:outline-none">
                @Html.Raw(ArchiveIcon) Archived Applications
            </button>
        </div>
        <table class="min-w-full table-auto rounded-lg bg-white">
            <thead class="rounded-md bg-gray-100">
                @await Html.PartialAsync("_ApplicationTableHeader", Model)
            </thead>

            <tbody class="divide-y divide-gray-200 bg-white">
                @await Html.PartialAsync("_ApplicationTableBody", Model)
            </tbody>
        </table>
    </div>
    <!-- Pagination -->
    <nav class="flex justify-center pt-3">
        <ul class="pagination flex items-center">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link flex items-center border px-3 py-1 !text-[#7A1515] hover:!text-[#A04747]"
                       asp-action="@aspAction" 
                       asp-route-pageIndex="@(Model.PageIndex - 1)" 
                       asp-route-sortBy="@sortBy"
                       asp-route-search="@search"
                       asp-route-programFilter="@filterByProgram"
                       asp-route-workSetupFilter="@filterByWorkSetup"
                       asp-route-statusFilter="@filterByStatus">
                        @Html.Raw(PaginationLeft)
                    </a>
                </li>
            }
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link border px-3 py-1 @(i == Model.PageIndex ? "!text-white hover:!bg-[#A04747]" : "!text-[#7A1515] hover:!text-[#A04747]")"
                       asp-action="@aspAction" 
                       asp-route-pageIndex="@i" 
                       asp-route-sortBy="@sortBy" 
                       asp-route-search="@search"
                       asp-route-programFilter="@filterByProgram"
                       asp-route-workSetupFilter="@filterByWorkSetup"
                       asp-route-statusFilter="@filterByStatus">
                         @i
                    </a>
                </li>
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link border px-3 py-1 !text-[#7A1515] hover:!text-[#A04747]"
                       asp-action="@aspAction" 
                       asp-route-pageIndex="@(Model.PageIndex + 1)" 
                       asp-route-sortBy="@sortBy" 
                       asp-route-search="@search"
                       asp-route-programFilter="@filterByProgram"
                       asp-route-workSetupFilter="@filterByWorkSetup"
                       asp-route-statusFilter="@filterByStatus">
                        @Html.Raw(PaginationRight)
                    </a>
                </li>
            }
        </ul>
    </nav>
</div>

@await Html.PartialAsync("_ApplicantDetailsModal")
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>

@section Scripts {
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/application.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const viewDetailsLinks = document.querySelectorAll('a.view-details');

            viewDetailsLinks.forEach(function (link) {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const id = this.getAttribute('data-id');

                    fetch(`@Url.Action("GetApplicantDetails", "Job")?id=${id}`)
                        .then(response => response.text())
                        .then(html => {
                            const modalContent = document.getElementById('applicantDetailsModalContent');
                            modalContent.innerHTML = html;
                            $('#applicantDetailsModal').modal('show');
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            toastr.error('An error occurred while loading the applicant details.');
                        });
                });
            });
        });

        function viewResume(id) {
            const newWindow = window.open('', '_blank');

            fetch(`@Url.Action("GetResume", "Home")?id=${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);

                    newWindow.location.href = url;

                    setTimeout(() => {
                        window.URL.revokeObjectURL(url);
                    }, 10000);
                })
                .catch(error => {
                    console.error('Error displaying resume:', error);
                    newWindow.document.write('<p>Failed to load the resume. Please try again later.</p>');
                });
        }
    </script>
}