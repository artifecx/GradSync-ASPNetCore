@model Services.ServiceModels.ApplicationViewModel
@using Data.Models;
@using Humanizer;
@using System.Text.Json;
@using static Resources.Constants.SvgIcons

@{
    ViewData["Title"] = $"{Model.Job.Title} Application | GradSync";
    await Html.RenderPartialAsync("_UpdateStatusModal");
    await Html.RenderPartialAsync("_ConfirmWithdrawModal");

    var userId = ViewBag.UserId;
    bool isClosed = Model.ApplicationStatusTypeId == "Rejected" || Model.ApplicationStatusTypeId == "Withdrawn" || Model.ApplicationStatusTypeId == "Accepted";
}

<div class="flex flex-col bg-gray-100 @(User.IsInRole("Applicant") ? "my-20  max-w-7xl max-h-screen mx-auto" : "size-full")">
    <div class="mb-2 w-full justify-between">
        <div class="w-full rounded-lg bg-white p-6 px-12 shadow-sm">
            <div class="flex justify-between">
                <button type="button" id="back-button" class="flex items-center text-xs font-semibold text-[#7A1515] hover:text-[#A04747] focus:!outline-none">
                    @Html.Raw(BackIcon)Back
                </button>
            </div>

            <div class="flex justify-between">
                <div class="font-bold text-[40px] text-[#7A1515]">@Model.Job.Title</div>

                <!-- Action Buttons -->
                <div class="flex justify-between space-x-4 p-2">
                    @if (Model.ApplicationStatusTypeId != "Withdrawn")
                    {
                        @if (User.IsInRole("Applicant"))
                        {
                            if (Model.ApplicationStatusTypeId != "Rejected" && Model.ApplicationStatusTypeId != "Accepted")
                            {
                                <!-- Withdraw -->
                                <button class="withdraw-application flex items-center rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747] disabled:bg-gray-400"
                                        data-applicationid="@Model.ApplicationId"
                                        data-position="@Model.Job.Title"
                                        data-toggle="modal"
                                        data-target="#withdrawApplicationModal">
                                    @Html.Raw(SignOutIcon) Withdraw Application
                                </button>
                            }
                        }
                        else if (User.IsInRole("Recruiter") && string.Equals(userId, Model.Job.PostedById))
                        {
                            <!-- Update Status -->
                            <button class="update-application-status flex items-center rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]"
                                    data-applicationid="@Model.ApplicationId"
                                    data-statusid="@Model.ApplicationStatusTypeId"
                                    data-toggle="modal"
                                    data-target="#updateApplicationStatusModal">
                                @Html.Raw(UpdateStatusIcon) Update Status
                            </button>
                        }
                    }
                </div>
            </div>

            <!-- Date Updated -->
            <div class="w-full text-sm text-[##625f5f]">
                <div class="">
                    <!-- Date Applied -->
                    <div class="text-xs text-gray-500" title="@Model.CreatedDate">
                        Applied
                        @(Model.CreatedDate == DateTime.MinValue ? "Date Not Available" : Model.CreatedDate.ToUniversalTime().Humanize())
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content with Sidebar -->
    <div class="flex flex-grow">
        <!-- Messages Section -->
        <div class="mr-2 w-full rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
            <h2 class="mb-4 pl-4 text-2xl font-bold text-[#625f5f]">Chat History</h2>

            <!-- Chat Box Container -->
            <div class="max-h-[calc(100%-100px)] min-h-[calc(100%-100px)] mx-4 flex flex-col rounded-lg border border-gray-200 bg-gray-50">
                <!-- Scrollable Chat Messages -->
                <div class="flex flex-grow flex-col overflow-y-auto p-4" id="messageList">
                    <div id="loadingIndicator" class="hidden text-center">
                        <div class="loader"></div>
                        <p>Loading messages...</p>
                    </div>
                    <!-- Message Div -->
                </div>
                <form id="sendForm">
                    <div class="flex items-center border-t border-gray-200 p-4">
                        <input id="messageInput" type="text" class="flex-grow rounded-lg border border-gray-300 p-2 text-sm focus:outline-none focus:ring-2" placeholder="Type your message..." @(User.IsInRole("NLO") ? "hidden" : "")>
                        <button id="sendButton" 
                            class="ml-4 rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A53D3D] disabled:bg-gray-400 disabled:cursor-not-allowed"
                            disabled @(User.IsInRole("NLO") || isClosed ? "hidden" : "")>
                            Send
                        </button>
                        <input type="hidden" id="threadId" value="@Model.ApplicationId" />
                        <input type="hidden" id="userId1" value="@Model.ApplicantId" />
                        <input type="hidden" id="userId2" value="@Model.Job.PostedById" />
                        <input type="hidden" id="title" value="Application" />
                        <input type="hidden" id="threadId" value="@Model.ApplicationId" />
                        <input type="hidden" id="currentUserId" value="@ViewBag.UserId" />
                    </div>
                </form>
            </div>
        </div>

        <!-- Sidebar -->
        @await Html.PartialAsync("_InfoTab", Model)
    </div>
</div>

@await Html.PartialAsync("_ApplicantDetailsModal")

<!-- TempData for Notifications -->
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>

@section Scripts {
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/messaging.js"></script>
    <script src="~/js/application.js"></script>
    <script>
        const urlParams = new URLSearchParams(window.location.search);

        const idParam = urlParams.get('id') ? `?id=${urlParams.get('id')}` : '';
        const newUrl = window.location.origin + window.location.pathname + idParam;
        window.history.replaceState({}, document.title, newUrl);

        document.querySelector('#back-button').addEventListener('click', function (event) {
            event.preventDefault();
            window.history.back();
        });

        document.addEventListener('DOMContentLoaded', function () {
            const viewDetailsLinks = document.querySelectorAll('a.view-details');

            viewDetailsLinks.forEach(function (link) {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const id = this.getAttribute('data-id');

                    fetch(`@Url.Action("GetApplicantDetails", "Job")?id=${id}`)
                        .then(response => response.text())
                        .then(html => {
                            const modalContent = document.getElementById('applicantDetailsModalContent');
                            modalContent.innerHTML = html;
                            $('#applicantDetailsModal').modal('show');
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            toastr.error('An error occurred while loading the applicant details.');
                        });
                });
            });
        });

        function viewResume(id) {
            const newWindow = window.open('', '_blank');

            fetch(`@Url.Action("GetResume", "Home")?id=${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);

                    newWindow.location.href = url;

                    setTimeout(() => {
                        window.URL.revokeObjectURL(url);
                    }, 10000);
                })
                .catch(error => {
                    console.error('Error displaying resume:', error);
                    newWindow.document.write('<p>Failed to load the resume. Please try again later.</p>');
                });
        }
    </script>
}
