@model Services.ServiceModels.PaginatedList<Services.ServiceModels.JobViewModel>
@using Data.Models
@using Humanizer
@using static Resources.Constants.SvgIcons

@{
    ViewData["Title"] = "All Jobs";

    string filterByCompany = ViewData["FilterByCompany"] as string;
    string filterByEmploymentType = ViewData["FilterByEmploymentType"] as string;
    string filterByStatusType = ViewData["FilterByStatusType"] as string;
    string filterByWorkSetup = ViewData["FilterByWorkSetup"] as string;

    string sortBy = ViewData["SortBy"] as string;
    string search = ViewData["Search"] as string;

    bool noResult = string.IsNullOrEmpty(search) && 
        string.IsNullOrEmpty(filterByCompany) && 
        string.IsNullOrEmpty(filterByEmploymentType) &&
        string.IsNullOrEmpty(filterByStatusType) && 
        string.IsNullOrEmpty(filterByWorkSetup);
}

@if (!Model.Any())
{
    <tr>
        <td colspan="8" class="whitespace-nowrap px-6 py-3 text-center text-sm text-[#625f5f]">
            @(noResult ? Html.Raw("No jobs found") : Html.Raw("No jobs found matching the criteria"))
        </td>
    </tr>
}
else
{
    @foreach (var item in Model)
    {
        <tr class="hover:bg-gray-100">
            <td class="py-3 pl-3 text-sm text-[#625f5f]">
                <div class="text-xs font-medium text-[#A04747]">
                    <button onclick="location.href='@Url.Action("GetJob", "Job",
                        new { 
                            id = item.JobId,
                            sortBy = sortBy,
                            search = search,
                            pageIndex = Model.PageIndex ,
                            filterByStatusType = filterByStatusType,
                            filterByWorkSetup = filterByWorkSetup,
                            filterByEmploymentType = filterByEmploymentType,
                            filterByCompany = filterByCompany,
                        })'">
                        @Html.DisplayFor(modelItem => item.Title)
                    </button>
                </div>
            </td>
            @if (!User.IsInRole("Recruiter"))
            {
                <td class="py-3 pl-3 text-xs font-medium text-[#625f5f]">@Html.DisplayFor(modelItem => item.Company.Name)</td>
            }
            else
            {
                <td class="py-3 pl-3 text-xs font-medium text-[#625f5f]">@Html.DisplayFor(modelItem => item.AvailableSlots)</td>
            }
            <td class="py-3 pl-3 text-xs font-medium text-[#625f5f]">@Html.DisplayFor(modelItem => item.EmploymentType.Name)</td>
            <td class="py-3 pl-6 text-xs font-medium text-[#625f5f]">@Html.DisplayFor(modelItem => item.StatusType.Name)</td>
            <td class="py-3 pl-3 text-xs font-medium text-[#625f5f]">@Html.DisplayFor(modelItem => item.SetupType.Name)</td>
            <td class="py-3 pl-3 text-xs font-medium text-[#625f5f]">@Html.DisplayFor(modelItem => item.CreatedDate)</td>
            <td class="py-3 pl-6 text-left">
                <div class="relative">
                    <!-- Dropdown Button -->
                    <button data-jobid="@item.JobId"
                            class="actionDropdownJobBtn flex cursor-pointer items-center px-6 text-[#343131] hover:text-[#A04747] focus:outline-none">
                        @Html.Raw(EllipsisVIcon)
                    </button>

                    <div id="actionDropdownJobMenu-@item.JobId"
                         class="actionDropdownJobMenu z-10 ring-1 ring-opacity-5 absolute right-0 mt-2 hidden w-48 origin-top-right rounded-md bg-white text-left shadow-lg ring-black">
                        <div class="space-y-1 py-1">
                            <!-- Job Details -->
                            <button onclick="location.href='@Url.Action("GetJob", "Job", 
                                    new { 
                                        id = item.JobId, 
                                        sortBy = sortBy, 
                                        search = search, 
                                        pageIndex = Model.PageIndex ,
                                        filterByStatusType = filterByStatusType,
                                        filterByWorkSetup = filterByWorkSetup,
                                        filterByEmploymentType = filterByEmploymentType,
                                        filterByCompany = filterByCompany
                                    })'"
                                    class="flex w-full cursor-pointer items-center px-4 py-2 text-left text-sm text-[#343131] hover:text-[#A04747] focus:outline-none">
                                @Html.Raw(DetailsIcon) Job Details
                            </button>

                            <!-- Update Status -->
                            <button data-toggle="modal"
                                    data-target="#updateJobStatusModal"
                                    data-jobid="@item.JobId"
                                    data-statusId="@item.StatusTypeId"
                                    class="update-job-status flex w-full cursor-pointer items-center px-4 py-2 text-left text-sm text-[#343131] hover:text-[#A04747] focus:outline-none disabled:cursor-not-allowed disabled:text-gray-400"
                                    disabled="@(User.IsInRole("Recruiter") && (item.StatusTypeId == "Pending" || item.StatusTypeId == "BlackListed"))">
                                @Html.Raw(UpdateStatusIcon) Update Status
                            </button>

                            <!-- Edit Job -->
                            <button onclick="location.href='@Url.Action("GetJob", "Job", 
                                    new { 
                                        id = item.JobId,
                                        sortBy = sortBy,
                                        search = search,
                                        pageIndex = Model.PageIndex ,
                                        filterByStatusType = filterByStatusType,
                                        filterByWorkSetup = filterByWorkSetup,
                                        filterByEmploymentType = filterByEmploymentType,
                                        filterByCompany = filterByCompany,
                                        showModal = "editJob" 
                                    })'"
                                    class="flex w-full cursor-pointer items-center px-4 py-2 text-left text-sm text-[#343131] hover:text-[#A04747] focus:outline-none">
                                @Html.Raw(UpdateIcon) Edit Job Info
                            </button>

                            <!-- Archive Job -->
                            <button onclick="displayDeleteModal('@item.JobId' , '@item.Title')"
                                    class="flex w-full cursor-pointer items-center px-4 py-2 text-left text-sm text-[#343131] hover:text-[#A04747] focus:outline-none">
                                @Html.Raw(ArchiveIcon) Archive Job
                            </button>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    }
}
        