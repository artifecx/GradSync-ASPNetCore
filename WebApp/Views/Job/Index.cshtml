@model Services.ServiceModels.PaginatedList<Services.ServiceModels.JobViewModel>
@using Data.Models
@using Humanizer

@{
    ViewData["Title"] = "All Jobs";
    await Html.RenderPartialAsync("_CreateJobModal", new Services.ServiceModels.JobViewModel());
    // await Html.RenderPartialAsync("_DeleteModal");

    string filterByCompany = ViewData["FilterByCompany"] as string;
    string filterByEmploymentType = ViewData["FilterByEmploymentType"] as string;
    string filterByStatusType = ViewData["FilterByStatusType"] as string;
    string filterByWorkSetup = ViewData["FilterByWorkSetup"] as string;

    string sortBy = ViewData["SortBy"] as string;
    string search = ViewData["Search"] as string;

    var employmentTypeDefault = string.Empty;
    var statusTypeDefault = string.Empty;
    var workSetupDefault = string.Empty;
    var sortByDefault = string.Empty;

    int pageIndex = Model.PageIndex;
    string aspAction = User.IsInRole("Recruiter") ? "GetAllJobsRecruiter" : "GetAllJobsAdmin";

    bool noResult = string.IsNullOrEmpty(search) && 
        string.IsNullOrEmpty(filterByCompany) && 
        string.IsNullOrEmpty(filterByEmploymentType) && 
        string.IsNullOrEmpty(filterByStatusType) && 
        string.IsNullOrEmpty(filterByWorkSetup);

    string sortByCreatedDate = sortBy == "created" ? "created_desc" : "created";
}

<div class="nav-header flex items-center justify-between">
    <h1 class="display-6 text-3xl font-semibold">Job Management</h1>
    <div class="flex items-center">
        <form method="get" asp-action="@aspAction" asp-route-sortBy="@sortBy" asp-route-search="@search" asp-route-pageIndex="@pageIndex" class="flex items-center">
            <div class="flex">
                <input type="text" name="Search" class="form-control btn-radius rounded-l-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Job title, position, keywords..." value="@search" />
                <button type="submit" class="btn btn-primary btn-radius-r rounded-r-md bg-blue-500 px-3 py-2 text-white hover:bg-blue-600">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            <input type="hidden" name="sortBy" value="@sortBy" />
        </form>
        @if (User.IsInRole("Recruiter"))
        {
            <div class="mx-3">
                <button type="button" class="btn btn-primary btn-radius rounded-md bg-blue-500 px-3 py-2 text-white hover:bg-blue-600" data-toggle="modal" data-target="#createJobModal">
                    <i class="fa fa-plus"></i>
                    New Job
                </button>
            </div>
        }
    </div>
</div>

<div class="container-fluid px-4 py-3">
    <table class="table-white table min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
            @await Html.PartialAsync("_JobTableHeader", Model)
        </thead>
        <tbody class="divide-y divide-gray-200 bg-white">
            @await Html.PartialAsync("_JobTableBody", Model)
        </tbody>
    </table>

    <nav class="mt-4 flex justify-end">
        <ul class="pagination flex items-center">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link border border-gray-300 px-3 py-1 text-gray-700 hover:bg-gray-200" asp-action="@aspAction" 
                        asp-route-pageIndex="@(Model.PageIndex - 1)" asp-route-sortBy="@sortBy" asp-route-search="@search"
                        asp-route-filterByCompany="@filterByCompany" asp-route-filterByEmploymentType="@filterByEmploymentType" 
                        asp-route-filterByStatusType="@filterByStatusType" asp-route-filterByWorkSetup="@filterByWorkSetup"
                    >Previous</a>
                </li>
            }
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link border border-gray-300 px-3 py-1 @(i == Model.PageIndex ? "bg-blue-500 text-white" : "text-gray-700 hover:bg-gray-200")" asp-action="@aspAction" 
                        asp-route-pageIndex="@i" asp-route-sortBy="@sortBy" asp-route-search="@search"
                        asp-route-filterByCompany="@filterByCompany" asp-route-filterByEmploymentType="@filterByEmploymentType" 
                        asp-route-filterByStatusType="@filterByStatusType" asp-route-filterByWorkSetup="@filterByWorkSetup"
                    >@i</a>
                </li>
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link border border-gray-300 px-3 py-1 text-gray-700 hover:bg-gray-200" asp-action="@aspAction" 
                        asp-route-pageIndex="@(Model.PageIndex + 1)" asp-route-sortBy="@sortBy" asp-route-search="@search"
                        asp-route-filterByCompany="@filterByCompany" asp-route-filterByEmploymentType="@filterByEmploymentType" 
                        asp-route-filterByStatusType="@filterByStatusType" asp-route-filterByWorkSetup="@filterByWorkSetup"
                    >Next</a>
                </li>
            }
        </ul>
    </nav>
</div>

<!-- Values passed to the js files -->
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>
<input type="hidden" id="baseUrl" value="@Url.Action($"{aspAction}", "Job")" />

@section Scripts {
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/job.js"></script>
}

