@model Services.ServiceModels.PaginatedList<Services.ServiceModels.JobViewModel>
@using Data.Models
@using Humanizer
@using System.Text.Json;

@{
    ViewData["Title"] = "Job Management | GradSync";
    await Html.RenderPartialAsync("_CreateJobModal", new Services.ServiceModels.JobViewModel());
    await Html.RenderPartialAsync("_UpdateStatusModal");
    await Html.RenderPartialAsync("_DeleteModal");

    string filterByCompany = ViewData["FilterByCompany"] as string;
    string filterByEmploymentType = ViewData["FilterByEmploymentType"] as string;
    string filterByStatusType = ViewData["FilterByStatusType"] as string;
    string filterByWorkSetup = ViewData["FilterByWorkSetup"] as string;

    string sortBy = ViewData["SortBy"] as string;
    string search = ViewData["Search"] as string;

    int pageIndex = Model.PageIndex;
    string aspAction = string.Empty;
    string aspActionArchived = string.Empty;

    if (User.IsInRole("Admin") || User.IsInRole("NLO"))
    {
        aspAction = "GetAllJobsAdmin";
        aspActionArchived = "GetArchivedJobs";
    }
    else if (User.IsInRole("Recruiter"))
    {
        aspAction = "GetAllJobsRecruiter";
        aspActionArchived = "GetArchivedJobsRecruiter";
    }

    var Programs = ViewBag.Programs as List<Program>;
    var SkillsSoft = ViewBag.SkillsSoft as List<Skill>;
    var SkillsTechnical = ViewBag.SkillsTechnical as List<Skill>;
    var SkillsCertification = ViewBag.SkillsCertification as List<Skill>;

    bool verified = ViewBag.Verified as bool? ?? false;

    bool hasFilters = !string.IsNullOrEmpty(search) ||
        !string.IsNullOrEmpty(filterByCompany) ||
        !string.IsNullOrEmpty(filterByEmploymentType) ||
        !string.IsNullOrEmpty(filterByStatusType) ||
        !string.IsNullOrEmpty(filterByWorkSetup);
}

@if (!verified && User.IsInRole("Recruiter"))
{
    <div class="mx-auto mt-10 rounded-lg border border-gray-200 bg-gray-100 p-6 shadow-md">
        <div class="mb-4 text-center text-sm font-semibold text-gray-700">
            <i>---- Someone from the NLO will need to manually approve your company before being allowed to post new jobs. ----</i>
        </div>

        <ul class="space-y-2 text-base font-medium text-gray-700">
            <li class="flex justify-between">
                <span>1. Company verification status:</span>
                <span class="font-semibold italic text-[#7A1515]">@(verified ? "Verified" : "Pending")</span>
            </li>
            <li class="flex justify-between">
                <span>2. Memorandum of Agreement status:</span>
                <span class="font-semibold italic text-[#7A1515]">@(verified ? "Verified" : "Pending")</span>
            </li>
        </ul>
    </div>
}
else
{
    <div class="h-full w-full p-6">
        <div class="flex items-center justify-between">
            <h1 class="pb-8 text-left text-4xl font-bold text-[#7A1515]">
                Job Management
            </h1>

            <!-- Search Button -->
            <div class="flex items-center space-x-2 pb-8">
                <div class="flex items-center space-x-2">
                    @if (hasFilters)
                    {
                        <form method="get" asp-action="@aspAction">
                            <button type="submit" class="rounded bg-gray-300 px-2 py-1 text-white">
                                <i class="fa-solid fa-xmark"></i>
                            </button>
                        </form>
                    }
                    <form method="get" asp-action="@aspAction"
                          class="flex items-center space-x-2">
                        @await Component.InvokeAsync("SearchInput", new { searchValue = search, placeholder = "Name, contact, address" })
                        <input type="hidden" name="sortBy" value="@sortBy" />
                    </form>

                    @if (User.IsInRole("Recruiter"))
                    {
                        <div class="ml-3">
                            <button type="button"
                                    class="rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]"
                                    data-toggle="modal"
                                    data-target="#createJobModal">
                                <i class="fa fa-plus"></i>
                                Add Job
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Table -->
        <div class="h-[75vh] overflow-auto rounded-lg bg-[#F5F7F8]">
            <div class="flex w-full justify-end bg-white py-2">
                <button onclick="location.href='@Url.Action(aspActionArchived, "Job",
                        new {
                            sortBy = sortBy,
                            search = search,
                            pageIndex = Model.PageIndex,
                            filterByStatusType = filterByStatusType,
                            filterByWorkSetup = filterByWorkSetup,
                            filterByEmploymentType = filterByEmploymentType,
                            filterByCompany = filterByCompany
                        })'"
                        class="w-full max-w-[200px] cursor-pointer text-right text-[#343131] hover:text-[#A04747] focus:outline-none">
                    <i class="fa fa-archive"></i> Archived Jobs
                </button>
            </div>
            <table class="min-w-full table-auto rounded-lg bg-white">
                <thead class="rounded-md bg-gray-100">
                    @await Html.PartialAsync("_JobTableHeader", Model)
                </thead>
                <tbody class="divide-y divide-gray-200 bg-white">
                    @await Html.PartialAsync("_JobTableBody", Model)
                </tbody>
            </table>
        </div>
        <!-- Pagination -->
        <nav class="flex justify-center pt-3">
            <ul class="pagination flex items-center">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link border border-red-300 px-3 py-1 text-gray-700 hover:bg-gray-200"
                           asp-action="@aspAction"
                           asp-route-pageIndex="@(Model.PageIndex - 1)"
                           asp-route-sortBy="@sortBy"
                           asp-route-search="@search">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a class="page-link border px-3 py-1 @(i == Model.PageIndex ? "bg-blue-500 text-white" : "text-gray-700 hover:bg-gray-200")"
                           asp-action="@aspAction"
                           asp-route-pageIndex="@i"
                           asp-route-sortBy="@sortBy"
                           asp-route-search="@search">
                            @i
                        </a>
                    </li>
                }
                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link border border-red-300 px-3 py-1 text-gray-700 hover:bg-gray-200"
                           asp-action="@aspAction"
                           asp-route-pageIndex="@(Model.PageIndex + 1)"
                           asp-route-sortBy="@sortBy"
                           asp-route-search="@search">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}

<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>
<input type="hidden" id="baseUrl" value="@Url.Action(aspAction, "Job")" />
<input type="hidden" id="deleteUrl" value="@Url.Action("Archive", "Job")" />

@section Scripts {
    <script src="~/js/delete.js"></script>
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/archive.js"></script>
    <script src="~/js/jobs.js"></script>
    <script>
        window.appData = {
            skillsS: @Html.Raw(JsonSerializer.Serialize(SkillsSoft
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            skillsT: @Html.Raw(JsonSerializer.Serialize(SkillsTechnical
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            skillsC: @Html.Raw(JsonSerializer.Serialize(SkillsCertification
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            programs: @Html.Raw(JsonSerializer.Serialize(Programs
                .Select(d => new { value = d.Name, id = d.ProgramId })))
        };
    </script>
}