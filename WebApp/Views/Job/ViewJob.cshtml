@model Services.ServiceModels.JobViewModel
@using Data.Models;
@using Humanizer;


@{
    ViewData["Title"] = Model.Title;
    var userId = ViewBag.UserId;
    string aspAction = User.IsInRole("Recruiter") ? "GetAllJobsRecruiter" : "GetAllJobsAdmin";
}


<div class="min-h-screen bg-gray-100 text-black">
    <div class="bg-gray-100 max-w-7xl mx-auto rounded-lg px-6 mt-6 flex gap-6">
        <div class="justify-between w-full">

            <div class="bg-white w-full px-12 p-6 rounded-lg shadow-sm">
                <div class="flex justify-between">
                    <!-- Back Button with Arrow -->
                    <button class="flex items-center font-semibold text-xs text-[#7A1515] hover-[#991b1b]" onclick="goBack()">
                        <i class="fas fa-arrow-left mr-2"></i> Back
                    </button>                      
                </div>

                <div class="flex justify-between">
                    <div class="text-[40px] font-bold">@Model.Title</div>

                    <!-- Action Buttons Placeholders Only-->
                    <div class="flex justify-between p-2 space-x-4">
                        @if (User.IsInRole("Applicant"))
                        {
                            <!-- Save -->
                            <button onclick="saveJobHandler('@Model.JobId')"
                                    class="btn-primary py-2 px-4 rounded-lg flex items-center justify-center transition-all hover:bg-[#991b1b] hover:text-white">
                                <i class="fa-regular fa-bookmark"></i>
                            </button>

                            <!-- Apply -->
                            <button onclick="applyJobHandler('@Model.JobId')"
                                    class="btn-primary py-2 px-4 rounded-lg flex items-center justify-center transition-all hover:bg-[#991b1b] hover:text-white">
                                <i class="fa-regular fa-paper-plane pr-1"></i> Apply
                            </button>
                        }
                        else if (User.IsInRole("Recruiter") && string.Equals(userId, Model.PostedById))
                        {
                            <!-- Edit -->
                            <button onclick="editJobHandler('@Model.JobId')"
                                    class="btn-primary py-2 px-4 rounded-lg flex items-center justify-center transition-all hover:bg-[#991b1b] hover:text-white">
                                <i class="fas fa-edit pr-2"></i> Edit
                            </button>
                        }
                    </div>
                </div>

                <!-- Second Row: Company Name and Date Posted -->
                <div class="w-full text-sm text-gray-700">
                   <div class="">
                      <span>
                            @Model.PostedBy.User?.FirstName - @Model.Company.Name 
                      </span>

                       <!-- Date Created -->
                      <div class="text-xs text-gray-500"> Posted
                            @(Model.CreatedDate == DateTime.MinValue ? "Date Not Available" : Model.CreatedDate.ToUniversalTime().Humanize())
                      </div>
                   </div>
                </div>          
            </div>
        </div>
    </div>     

    <!--MAIN CONTENT W/SIDEBAR-->
     <div class="max-w-7xl mx-auto px-6 mt-6 flex gap-6">
         <!-- Job Listings Section -->
         <div class="w-full bg-white p-6 rounded-lg shadow-sm border border-gray-200">
           <h2 class="text-2xl font-bold text-gray-500 mb-2 pl-4">Job Details</h2>

                 <!-- Main Content -->
            <div class="gap-6 pb-4 px-4">
                 <!-- Skills Required -->
                 <div class="p-1 bg-gray-100 rounded-xl shadow-md mb-3 hover:shadow-lg transition-shadow duration-300">
                    <div class="bg-white rounded-xl border p-4">
                          <h3 class="mb-4 text-xl font-bold">Skills Required</h3>
                          <p>@string.Join(", ", (Model.Skills as List<Skill>).Select(skill => skill.Name))</p>

                        <!--Skill Placeholder Only-->
                        <div class="mb-1 flex flex-wrap space-x-3">
                            <span class="rounded-full outline outline-offset-1 outline-[#7A1515] px-2 py-1 text-xs">Skill 1</span>
                            <span class="rounded-full outline outline-offset-1 outline-[#7A1515] px-2 py-1 text-xs">Skill 2</span>
                            <span class="rounded-full outline outline-offset-1 outline-[#7A1515] px-2 py-1 text-xs">Skill 3</span>
                        </div>
                    </div>
                 </div>

                 <div class="p-1 bg-gray-100 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300">   
                <!-- About the Job -->
                    <div class="bg-white rounded-xl border p-4">
                         <h3 class="mb-4 text-xl font-bold">About the Job</h3>
                         <p class="whitespace-pre-wrap text-base text-gray-600">@Model.Description</p>
                    </div>
                 </div>
            </div>
         </div>
            <!-- Infotab Sidebar -->
            @await Html.PartialAsync("InfoTab")
        </div>
    </div>
</div>

<!-- TempData for Notifications -->
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>

@section Scripts {
            <script src="~/js/toastrNotification.js"></script>
            <script>
                document.querySelector('.back-button').addEventListener('click', function (event) {
                    event.preventDefault();
                    const baseUrl = '@Url.Action(aspAction, "Job")';
                    const params = new URLSearchParams();
                    params.set('sortBy', sessionStorage.getItem('sortBy') || '');
                    params.set('filterByCompany', sessionStorage.getItem('filterByCompany') || '');
                    params.set('filterByEmploymentType', sessionStorage.getItem('filterByEmploymentType') || '');
                    params.set('filterByStatusType', sessionStorage.getItem('filterByStatusType') || '');
                    params.set('filterByWorkSetup', sessionStorage.getItem('filterByWorkSetup') || '');
                    params.set('search', sessionStorage.getItem('search') || '');
                    params.set('pageIndex', sessionStorage.getItem('pageIndex') || '1');
                    window.location.href = ${baseUrl}?${params.toString()};
                });
            </script>
}

@functions {
    public string GetEmploymentTypeClass(string type)
    {
        switch (type.ToLower())
        {
            case "full-time":
                return "bg-green-200 text-green-800";
            case "part-time":
                return "bg-orange-200 text-orange-800";
            case "contract":
                return "bg-yellow-200 text-yellow-800";
            default:
                return "bg-gray-200 text-gray-800";
        }
    }
}