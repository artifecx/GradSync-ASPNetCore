@model Services.ServiceModels.JobViewModel
@using Data.Models;
@using Humanizer;
@using System.Text.Json;

@{
    ViewData["Title"] = Model.Title;
    var userId = ViewBag.UserId;
    string aspAction = string.Empty;

    if (User.IsInRole("Admin") || User.IsInRole("NLO"))
        aspAction = "GetAllJobsAdmin";
    else if (User.IsInRole("Recruiter"))
        aspAction = "GetAllJobsRecruiter";
    else
        aspAction = "GetAllJobsApplicant";

    await Html.RenderPartialAsync("_EditJobModal", Model);

    var Programs = ViewBag.Programs as List<Program>;
    var Skills = ViewBag.Skills as List<Skill>;
}

<div class="mt-8 min-h-screen bg-gray-100 text-black">
    <div class="mx-auto mt-10 flex max-w-7xl gap-6 rounded-lg bg-gray-100 px-6">
        <div class="w-full justify-between">
            <div class="w-full rounded-lg bg-white p-6 px-12 shadow-sm">
                <div class="flex justify-between">         
                    <a href="#" id="back-button" class="hover-[#991b1b] flex items-center text-xs font-semibold text-[#7A1515]">
                        <i class="fas fa-arrow-left mr-2"></i> Back
                    </a>
                </div>

                <div class="flex justify-between">
                    <div class="font-bold text-[40px]">@Model.Title</div>

                    <!-- Action Buttons Placeholders Only-->
                    <div class="flex justify-between space-x-4 p-2">
                        @if (User.IsInRole("Applicant"))
                        {
                            <!-- Save -->
                            <button onclick="saveJobHandler('@Model.JobId')"
                                    class="btn-primary flex items-center justify-center rounded-lg px-4 py-2 transition-all hover:bg-[#991b1b] hover:text-white">
                                <i class="fa-regular fa-bookmark"></i>
                            </button>

                            <!-- Apply -->
                            <button onclick="applyJobHandler('@Model.JobId')"
                                    class="btn-primary flex items-center justify-center rounded-lg px-4 py-2 transition-all hover:bg-[#991b1b] hover:text-white">
                                <i class="fa-regular fa-paper-plane pr-1"></i> Apply
                            </button>
                        }
                        else if (User.IsInRole("Recruiter") && string.Equals(userId, Model.PostedById))
                        {
                            <!-- Edit -->
                            <button class="btn-primary flex items-center justify-center rounded-lg px-4 py-2 transition-all hover:bg-[#991b1b] hover:text-white"
                                    data-toggle="modal"
                                    data-target="#editJobModal">
                                <i class="fas fa-edit pr-2"></i> Edit
                            </button>
                        }
                    </div>
                </div>

                <!-- Second Row: Company Name and Date Posted -->
                <div class="w-full text-sm text-gray-700">
                   <div class="">
                      <span>
                            @Model.PostedBy.User?.FirstName - @Model.Company.Name 
                      </span>

                       <!-- Date Created -->
                        <div class="text-xs text-gray-500" title="@Model.UpdatedDate">Updated
                            @(Model.UpdatedDate == DateTime.MinValue ? "Date Not Available" : Model.UpdatedDate.ToUniversalTime().Humanize())
                      </div>
                   </div>
                </div>          
            </div>
        </div>
    </div>     

    <!--MAIN CONTENT W/SIDEBAR-->
     <div class="mx-auto mt-6 flex max-w-7xl gap-6 px-6">
         <!-- Job Listings Section -->
         <div class="w-full rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
           <h2 class="mb-2 pl-4 text-2xl font-bold text-gray-500">Job Details</h2>

                 <!-- Main Content -->
            <div class="gap-6 px-4 pb-4">
                 <!-- Skills Required -->
                 <div class="mb-3 rounded-xl bg-gray-100 p-1 shadow-md transition-shadow duration-300 hover:shadow-lg">
                    <div class="rounded-xl border bg-white p-4">
                          <h3 class="mb-4 text-xl font-bold">Skills Required</h3>
                        @*<p>@string.Join(", ", (Model.Skills as List<Skill>).Select(skill => skill.Name))</p>*@

                        <!--Skill Placeholder Only-->
                        <div class="mb-1 flex flex-wrap space-x-3">
                            @if (Model.Skills.Any())
                            {
                                @foreach (var skill in Model.Skills)
                                {
                                    <span class="outline-offset-1 rounded-full px-2 py-1 text-xs font-semibold outline outline-[#7A1515]">@skill.Name.ToUpper()</span>
                                }
                            }
                            else
                            {
                                <text>No skills listed</text>
                            }
                        </div>
                    </div>
                 </div>

                 <div class="rounded-xl bg-gray-100 p-1 shadow-md transition-shadow duration-300 hover:shadow-lg">   
                    <!-- About the Job -->
                    <div class="rounded-xl border bg-white p-4">
                         <h3 class="mb-4 text-xl font-bold">About the Job</h3>
                         <p class="whitespace-pre-wrap text-base text-gray-600">@Model.Description</p>
                    </div>
                 </div>
            </div>
         </div>
            <!-- Infotab Sidebar -->
            @await Html.PartialAsync("InfoTab")
        </div>
    </div>

<!-- TempData for Notifications -->
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>

@section Scripts {
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/job.js"></script>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        sessionStorage.setItem('sortBy', urlParams.get('sortBy') || '');
        sessionStorage.setItem('filterByEmploymentType', JSON.stringify(urlParams.getAll('filterByEmploymentType')) || '[]');
        sessionStorage.setItem('filterByStatusType', urlParams.get('filterByStatusType') || '');
        sessionStorage.setItem('filterByWorkSetup', JSON.stringify(urlParams.getAll('filterByWorkSetup')) || '[]');
        sessionStorage.setItem('search', urlParams.get('search') || '');
        sessionStorage.setItem('pageIndex', urlParams.get('pageIndex') || '1');
        sessionStorage.setItem('filterByDatePosted', urlParams.get('filterByDatePosted') || '');
        sessionStorage.setItem('filterBySalary', urlParams.get('filterBySalary') || '');

        const idParam = urlParams.get('id') ? `?id=${urlParams.get('id')}` : '';
        const newUrl = window.location.origin + window.location.pathname + idParam;
        window.history.replaceState({}, document.title, newUrl);

        document.querySelector('#back-button').addEventListener('click', function (event) {
            event.preventDefault();
            const baseUrl = '@Url.Action($"{aspAction}", "Job")';
            const params = new URLSearchParams();
            const filterByEmploymentType = JSON.parse(sessionStorage.getItem('filterByEmploymentType') || '[]');
            const filterByWorkSetup = JSON.parse(sessionStorage.getItem('filterByWorkSetup') || '[]');
            filterByEmploymentType.forEach(employmentType => {
                params.append('filterByEmploymentType', employmentType);
            });
            filterByWorkSetup.forEach(workSetup => {
                params.append('filterByWorkSetup', workSetup);
            });
            params.set('sortBy', sessionStorage.getItem('sortBy') || '');
            params.set('filterByStatusType', sessionStorage.getItem('filterByStatusType') || '');
            params.set('search', sessionStorage.getItem('search') || '');
            params.set('pageIndex', sessionStorage.getItem('pageIndex') || '1');
            params.set('filterByDatePosted', sessionStorage.getItem('filterByDatePosted') || '');
            params.set('filterBySalary', sessionStorage.getItem('filterBySalary') || '');
            window.location.href = `${baseUrl}?${params.toString()}`;
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var existingSkills = @Html.Raw(JsonSerializer.Serialize(Model.Skills.Select(s => new { value = s.Name, id = s.SkillId })));
            var existingPrograms = @Html.Raw(JsonSerializer.Serialize(Model.Programs.Select(d => new { value = d.Name, id = d.ProgramId })));

            var cancelClicked = false;
            document.getElementById("closeEditJobModal").addEventListener("click", function () {
                cancelClicked = true;
            });
            document.getElementById("cancelEditJob").addEventListener("click", function () {
                cancelClicked = true;
            });
            $('#editJobModal').on('hidden.bs.modal', function () {
                if(cancelClicked){
                    editJobForm.reset();
                    $(".text-red-500").text('');
                    $("#remainingTitleChars").text('100 characters remaining');
                    $("#remainingDescriptionChars").text('800 characters remaining');
                    tagifySkills.addTags(existingSkills);
                    tagifyPrograms.addTags(existingPrograms);
                }
                cancelClicked = false;
            });

            var skillsInput = document.querySelector('#editJobSkillsInput');
            var skillsHiddenInputs = document.getElementById('skillsHiddenInputs');

            var skillsList = @Html.Raw(JsonSerializer.Serialize(Skills.Select(s => new { value = s.Name, id = s.SkillId })));
            var tagifySkills = new Tagify(skillsInput, {
                whitelist: skillsList,
                enforceWhitelist: true,
                searchKeys: ['value'],
                pattern: null,
                dropdown: {
                    classname: "color-blue",
                    enabled: 0,
                    maxItems: 5,
                    position: 'top'
                },
            });

            tagifySkills.DOM.scope.classList.add(
                'block',
                'w-full',
                'rounded-lg',
                'border',
                'border-gray-300',
                'p-2',
                'focus:ring-blue-500',
                'focus:border-blue-500',
                'overflow-y-auto',
                'max-h-16'
            );

            tagifySkills.addTags(existingSkills);

            tagifySkills.on('change', function () {
                var selectedValues = tagifySkills.value;
                skillsHiddenInputs.innerHTML = '';
                selectedValues.forEach(function (item, index) {
                    var hiddenInputId = document.createElement('input');
                    hiddenInputId.type = 'hidden';
                    hiddenInputId.name = 'Skills[' + index + '].SkillId';
                    hiddenInputId.value = item.id;
                    skillsHiddenInputs.appendChild(hiddenInputId);
                });
            });

            var programsInput = document.querySelector('#editJobProgramsInput');
            var programsHiddenInputs = document.getElementById('programsHiddenInputs');
            var programsList = @Html.Raw(JsonSerializer.Serialize(Programs.Select(d => new { value = d.Name, id = d.ProgramId })));
            var tagifyPrograms = new Tagify(programsInput, {
                whitelist: programsList,
                enforceWhitelist: true,
                searchKeys: ['value'],
                pattern: null,
                dropdown: {
                    classname: "color-blue",
                    enabled: 0,
                    maxItems: 5,
                    position: 'top'
                },
            });

            tagifyPrograms.DOM.scope.classList.add(
                'block',
                'w-full',
                'rounded-lg',
                'border',
                'border-gray-300',
                'p-2',
                'focus:ring-blue-500',
                'focus:border-blue-500',
                'overflow-y-auto',
                'max-h-16'
            );

            tagifyPrograms.addTags(existingPrograms);

            tagifyPrograms.on('change', function () {
                var selectedValues = tagifyPrograms.value;
                programsHiddenInputs.innerHTML = '';
                selectedValues.forEach(function (item, index) {
                    var hiddenInputId = document.createElement('input');
                    hiddenInputId.type = 'hidden';
                    hiddenInputId.name = 'Programs[' + index + '].ProgramId';
                    hiddenInputId.value = item.id;
                    programsHiddenInputs.appendChild(hiddenInputId);
                });
            });
        });
    </script>
}

@functions {
    public string GetEmploymentTypeClass(string type)
    {
        switch (type.ToLower())
        {
            case "full-time":
                return "bg-green-200 text-green-800";
            case "part-time":
                return "bg-orange-200 text-orange-800";
            case "contract":
                return "bg-yellow-200 text-yellow-800";
            default:
                return "bg-gray-200 text-gray-800";
        }
    }
}