@model Services.ServiceModels.JobViewModel
@using System.Security.Claims
@using Data.Models;
@using Humanizer;
@using System.Text.Json;
@using Services.Services

@{
    ViewData["Title"] = Model.Title;
    await Html.RenderPartialAsync("_EditJobModal", Model);

    var userId = ViewBag.UserId;
    string aspAction = string.Empty;

    bool isAdmin = User.IsInRole("Admin") || User.IsInRole("NLO");
    bool isRecruiter = User.IsInRole("Recruiter");

    if (isAdmin) aspAction = "GetAllJobsAdmin";
    else if (isRecruiter) aspAction = "GetAllJobsRecruiter";
    else aspAction = "GetAllJobsApplicant";

    var Programs = ViewBag.Programs as List<Program>;
    var SkillsSoft = ViewBag.SkillsSoft as List<Skill>;
    var SkillsTechnical = ViewBag.SkillsTechnical as List<Skill>;
    var SkillsCertification = ViewBag.SkillsCertification as List<Skill>;
}

<div class="flex flex-col bg-gray-100 @(User.IsInRole("Applicant") ? "my-20 max-w-7xl max-h-screen min-h-screen mx-auto" : "size-full")">
    <div class="mb-2 w-full justify-between">
        <div class="w-full rounded-lg bg-white p-6 px-12 shadow-sm">
            <div class="flex justify-between">
                <button type="button" id="back-button" class="flex items-center text-xs font-semibold text-[#7A1515] hover:text-[#A04747] focus:!outline-none">
                    <i class="fas fa-arrow-left mr-2"></i> Back
                </button>
            </div>

            <div class="flex justify-between">
                <div class="font-bold text-[40px] text-[#7A1515]">@Model.Title</div>

                <!-- Action Buttons Placeholders Only-->
                <div class="flex justify-between space-x-4 p-2">
                    @if (User.IsInRole("Applicant"))
                    {
                        var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                        var hasApplied = Model.HasApplied;

                        if (hasApplied)
                        {
                            <!-- Withdraw Application Button -->
                            <button class="rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]"
                                    id="withdrawButton"
                                    data-action-url="@Url.Action("WithdrawApplication", "Application")"
                                    onclick="withdrawApplicationHandler('@Model.ApplicationId')">
                                Withdraw Application
                            </button>

                            <button onclick="location.href='@Url.Action("GetApplication", "Application",
                                        new { id = Model.ApplicationId })'"
                                    class="rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]">
                                <i class="fa-solid fa-info-circle pr-1"></i> See Details
                            </button>
                        }
                        else
                        {
                            <!-- Save -->
                            <button onclick="saveJobHandler('@Model.JobId')"
                                    class="rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]">
                                <i class="fa-regular fa-bookmark"></i>
                            </button>

                            <!-- Apply Button -->
                            <button onclick="applyJobHandler('@Model.JobId')"
                                    class="rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]">
                                <i class="fa-regular fa-paper-plane pr-1"></i> Apply
                            </button>
                        }
                    }
                    else if (User.IsInRole("Recruiter") && string.Equals(userId, Model.PostedById) || isAdmin)
                    {
                        <!-- Edit Button -->
                        <button class="rounded bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A04747]"
                                data-toggle="modal"
                                data-target="#editJobModal">
                            <i class="fas fa-edit pr-2"></i> Update
                        </button>
                    }
                </div>
            </div>

            <!-- Second Row: Company Name and Date Posted -->
            <div class="w-full text-sm text-gray-700">
                <div class="">
                    <span>
                        @Model.PostedBy.User?.FirstName - @Model.Company.Name
                    </span>

                    <!-- Date Created -->
                    <div class="text-xs text-gray-500" title="@Model.UpdatedDate">
                        Updated
                        @(Model.UpdatedDate == DateTime.MinValue ? "Date Not Available" : Model.UpdatedDate.ToUniversalTime().Humanize())
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--MAIN CONTENT W/SIDEBAR-->
    <div class="flex flex-grow">
        <!-- Job Listings Section -->
        <div class="mr-2 w-full rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
            <h2 class="mb-2 pl-4 text-2xl font-bold text-gray-500">Job Details</h2>

            <!-- Main Content -->
            <div class="h-full gap-6 px-4 pb-4">
                <!-- Skills Required -->
                <div class="mb-3 rounded-xl bg-gray-100 p-1 shadow-md transition-shadow duration-300 hover:shadow-lg">
                    <div class="rounded-xl border bg-white p-4">
                        <h3 class="mb-4 text-xl font-bold">Skills Required</h3>
                        @*<p>@string.Join(", ", (Model.Skills as List<Skill>).Select(skill => skill.Name))</p>*@

                        <!--Skill Placeholder Only-->
                        <div class="mb-1 flex flex-wrap space-x-3">
                            @if (Model.Skills.Any())
                            {
                                @foreach (var skill in Model.Skills)
                                {
                                    <span class="outline-offset-1 rounded-full px-2 py-1 text-xs font-semibold outline outline-[#7A1515]">@skill.Name.ToUpper()</span>
                                }
                            }
                            else
                            {
                                <text>No skills listed</text>
                            }
                        </div>
                    </div>
                </div>

                <div class="rounded-xl bg-gray-100 p-1 shadow-md transition-shadow duration-300 hover:shadow-lg">
                    <!-- About the Job -->
                    <div class="rounded-xl border bg-white p-4">
                        <h3 class="mb-4 text-xl font-bold">About the Job</h3>
                        <p class="whitespace-pre-wrap text-base text-gray-600">@Model.Description</p>
                    </div>
                </div>
            </div>
        </div>
        <!-- Infotab Sidebar -->
        @await Html.PartialAsync("InfoTab")
    </div>
</div>

<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>
<input type="hidden" id="actionUrl" value="@Url.Action("SendApplication", "Application")" />
<input type="hidden" id="withdrawUrl" value="@Url.Action("WithdrawApplication", "Application")" />
<input type="hidden" id="baseUrl" value="@Url.Action($"{aspAction}", "Job")" />

@section Scripts {
    <script src="~/js/toastrNotification.js"></script>
    <script src="~/js/job.js"></script>
    <script>
        window.appData = {
            existingSkillsS: @Html.Raw(JsonSerializer.Serialize(Model.Skills
                .Where(s => s.Type == "Common Skill")
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            existingSkillsT: @Html.Raw(JsonSerializer.Serialize(Model.Skills
                .Where(s => s.Type == "Specialized Skill")
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            existingSkillsC: @Html.Raw(JsonSerializer.Serialize(Model.Skills
                .Where(s => s.Type == "Certification")
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            existingPrograms: @Html.Raw(JsonSerializer.Serialize(Model.Programs
                .Select(d => new { value = d.Name, id = d.ProgramId }))),
            skillsS: @Html.Raw(JsonSerializer.Serialize(SkillsSoft
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            skillsT: @Html.Raw(JsonSerializer.Serialize(SkillsTechnical
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            skillsC: @Html.Raw(JsonSerializer.Serialize(SkillsCertification
                .Select(s => new { value = s.Name, id = s.SkillId }))),
            programs: @Html.Raw(JsonSerializer.Serialize(Programs
                .Select(d => new { value = d.Name, id = d.ProgramId })))
        };
    </script>
}

@functions {
    public string GetEmploymentTypeClass(string type)
    {
        switch (type.ToLower())
        {
            case "full-time":
                return "bg-green-200 text-green-800";
            case "part-time":
                return "bg-orange-200 text-orange-800";
            case "contract":
                return "bg-yellow-200 text-yellow-800";
            default:
                return "bg-gray-200 text-gray-800";
        }
    }
}