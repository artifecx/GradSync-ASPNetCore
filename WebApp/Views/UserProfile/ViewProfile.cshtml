@model Services.ServiceModels.UserProfileViewModel

@{
    ViewData["Title"] = "Profile | GradSync";
    var fullname = $"{Model.FirstName} {Model.MiddleName} {Model.LastName} {Model.Suffix}";
    var email = Model.Email;
    var isRecruiter = User.IsInRole("Recruiter");
    var isApplicant = User.IsInRole("Applicant");
}

<div class="flex h-full items-center justify-center">
    <div class="h-[80%] w-full max-w-7xl p-6">
        <div class="flex h-full">
            <!-- Sidebar for navigation -->
            <div class="border-r-2 flex h-full w-1/4 flex-col justify-between overflow-auto bg-white p-4">
                <div>
                    <div class="relative mb-6">
                        <!-- Profile picture section -->
                        <div class="group relative mx-auto h-24 w-24">
                            <img id="profile-picture-preview" class="h-full w-full rounded-full object-cover shadow" src="https://via.placeholder.com/150" alt="Profile Picture" />
                            <div id="edit-icon" class="opacity-0 group-hover:opacity-100 pointer-events-none absolute inset-0 flex items-center justify-center transition-opacity duration-200">
                                <i class="fas fa-pencil-alt rounded-full bg-white p-2 text-gray-500 shadow-md"></i>
                            </div>
                            <input type="file" id="profile-picture" name="ProfilePicture" class="opacity-0 absolute inset-0 h-full w-full cursor-pointer" accept="image/*" />
                        </div>
                        <h3 class="mt-4 text-center text-xl font-semibold">@fullname</h3>
                        <p class="text-center text-gray-600">@email</p>

                        <!-- Save and Clear Buttons -->
                        <div id="save-clear-buttons" class="absolute right-0 top-0 flex hidden gap-2">
                            <button id="save-profile-btn"><i class="fas fa-check rounded-full bg-white p-1 text-green-500 shadow-md"></i></button>
                            <button id="clear-profile-btn"><i class="fas fa-times rounded-full bg-white p-1 text-red-500 shadow-md"></i></button>
                        </div>
                    </div>

                    <!-- Navigation Buttons -->
                    <div class="flex flex-col space-y-2">
                        <button class="tab-btn active-tab rounded-md bg-gray-100 p-2 text-left hover:bg-gray-200" data-target="profile-section">
                            Profile
                        </button>
                        @if (User.IsInRole("Applicant"))
                        {
                            <button class="tab-btn rounded-md p-2 text-left hover:bg-gray-200" data-target="skills-resume-section">
                                Skills & Resume
                            </button>
                        }
                        <button class="tab-btn rounded-md p-2 text-left hover:bg-gray-200" data-target="preferences-section">
                            Preferences
                        </button>
                        <button class="tab-btn rounded-md p-2 text-left hover:bg-gray-200" data-target="password-section">
                            Change Password
                        </button>
                    </div>
                </div>
                <div class="flex justify-center">
                    <button class="text-red-500 hover:text-red-700">Delete Account</button>
                </div>
            </div>

            <!-- Content Section -->
            <div class="w-3/4 overflow-auto bg-white p-6">
                <!-- SECTION: Profile (default) -->
                <div id="profile-section" class="tab-content">
                    <div class="flex justify-between">
                        <h2 class="mb-4 text-2xl font-semibold">Profile</h2>
                        <div>
                            <button type="button" id="cancelButton" class="hidden rounded bg-gray-500 px-2 py-2 text-sm font-semibold text-white hover:bg-gray-600"
                                    onclick="cancelEdit()">
                                Cancel
                            </button>
                            <button type="button" id="saveButton" class="hidden rounded bg-[#7A1515] px-2 py-2 text-sm font-semibold text-white hover:bg-[#A53D3D]"
                                    onclick="submitChanges()">
                                Save Changes
                            </button>
                            <button type="button" onclick="enableEditMode()" id="editButton"
                                    class="rounded-md bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A53D3D]">
                                <i class="fas fa-edit pr-1"></i> Update
                            </button>
                        </div>
                    </div>
                    <!-- User Details -->
                    <div class="space-y-2">
                        <div><strong>Name:</strong><input class="ml-2 disabled:bg-white" value="@fullname" disabled/></div>
                        <div><strong>Email:</strong><input class="ml-2 disabled:bg-white" value="@email" disabled/></div>
                        @if(isApplicant)
                        {
                            <div><strong>Address:</strong><input class="ml-2 disabled:bg-white" value="@Model.Applicant.Address" disabled/></div>
                        }
                    </div>
                    <hr />
                    <!-- Applicant/Recruiter Details -->
                    <div class="space-y-2">
                        <div class="mb-4 space-y-0">
                            @if(isRecruiter)
                            {
                                <div class="text-lg font-bold text-gray-600">Company Profile</div>
                                <div class="text-xs font-medium text-gray-500">To update company details, go to company tab</div>
                            }
                            else
                            {
                                <div class="text-lg font-bold text-gray-600">Educational Profile</div>
                                <div class="text-xs font-medium text-gray-500">Contact <span class="font-semibold">nlo@gradsync.org</span> to request an update on your educational profile.</div>
                            }
                        </div>
                        <!-- Recruiter Details -->
                        @if (isRecruiter)
                        {
                            var company = Model.Recruiter.Company;
                            <div><strong>Name:</strong><input class="ml-2 disabled:bg-white" value="@company.Name" disabled/></div>
                            <div><strong>Address:</strong><input class="ml-2 disabled:bg-white" value="@company.Address" disabled/></div>
                            <div><strong>Email:</strong><input class="ml-2 disabled:bg-white" value="@company.ContactEmail" disabled/></div>
                            <div><strong>Number:</strong><input class="ml-2 disabled:bg-white" value="@company.ContactNumber" disabled/></div>
                        }
                        else
                        {
                            var applicant = Model.Applicant;
                            var educationalDetails = applicant.EducationalDetail;
                            <div><strong>Id Number:</strong><span class="ml-2" />@educationalDetails.IdNumber</div>
                            <div><strong>College:</strong><span class="ml-2" />@educationalDetails.College.Name</div>
                            <div><strong>Department:</strong><span class="ml-2" />@educationalDetails.Department.Name</div>
                            <div><strong>Program:</strong><span class="ml-2" />@educationalDetails.Program.Name</div>
                            <div><strong>Year Level:</strong><span class="ml-2" />@educationalDetails.YearLevel.Name</div>
                        }
                    </div>
                </div>

                <!-- SECTION: Skills & Resume -->
                <div id="skills-resume-section" class="tab-content hidden">
                    <form id="skills-resume-form">
                        <div class="mb-4 flex items-center justify-between">
                            <h2 class="mb-4 text-2xl font-semibold">Skills</h2>
                            <div class="flex space-x-2">
                                <button type="button" id="cancel-preferences-btn" class="hidden rounded-md bg-[#6c757d] px-3 py-2 font-medium text-white hover:bg-[#939BA2]">
                                    Cancel
                                </button>
                                <button type="button" id="save-preferences-btn" class="hidden rounded-md bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A53D3D]">
                                    Update
                                </button>
                            </div>
                        </div>

                        <div class="mb-4 space-y-2">
                            <!-- Cultural Skills -->
                            <div class="flex-1">
                                <label class="block text-sm font-medium text-gray-700">Cultural/Soft Skills</label>
                                <input placeholder="Open Mindset, Communication, Leadership" type="text" id="createJobSkillsSInput" class="block w-full rounded-lg border border-gray-300 p-2 text-sm" />
                                <div type="hidden" id="skillsSHiddenInputs" name="SkillsS"></div>
                                <span class="text-sm text-red-500" id="skillsSValidation"></span>
                            </div>
                            <!-- Technical Skills -->
                            <div class="flex-1">
                                <label class="block text-sm font-medium text-gray-700">Technical Skills</label>
                                <input placeholder="C# (Programming Language), ASP.NET" type="text" id="createJobSkillsTInput" class="block w-full rounded-lg border border-gray-300 p-2 text-sm" />
                                <div type="hidden" id="skillsTHiddenInputs" name="SkillsT"></div>
                                <span  class="text-sm text-red-500" id="skillsTValidation"></span>
                            </div>
                            <!-- Certification Skills -->
                            <div class="flex-1">
                                <label class="block text-sm font-medium text-gray-700">Certifications</label>
                                <input placeholder="Microsoft Azure Certification, CompTIA CASP+ CE" type="text" id="createJobSkillsCInput" class="block w-full rounded-lg border border-gray-300 p-2 text-sm" />
                                <div type="hidden" id="skillsCHiddenInputs" name="SkillsC"></div>
                                <span class="text-sm text-red-500" id="skillsCValidation"></span>
                            </div>
                        </div>
                        <hr />
                        <div>resume here</div>
                    </form>
                </div>

                <!-- SECTION: Preferences -->
                <div id="preferences-section" class="tab-content hidden">
                    <form id="preferences-form">
                        <div class="mb-4 flex items-center justify-between">
                            <h2 class="mb-4 text-2xl font-semibold">Preferences</h2>
                            <div class="flex space-x-2">
                                <button type="button" id="cancel-preferences-btn" class="hidden rounded-md bg-[#6c757d] px-3 py-2 font-medium text-white hover:bg-[#939BA2]">
                                    Cancel
                                </button>
                                <button type="button" id="save-preferences-btn" class="hidden rounded-md bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A53D3D]">
                                    Update
                                </button>
                            </div>
                        </div>

                        <!-- Notification Preferences -->
                        <div class="mb-4">
                            <button type="button" class="toggle-preferences flex w-full items-center justify-between rounded-md bg-gray-100 px-4 py-2 focus:outline-none" data-target="#notification-preferences-content" data-icon="#notification-icon">
                                <span class="text-xl font-medium">Notifications</span>
                                <svg id="notification-icon" class="h-6 w-6 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                </svg>
                            </button>

                            <div id="notification-preferences-content" class="mt-1 hidden rounded-md border border-gray-200 bg-gray-50 p-4">
                                @await Html.PartialAsync("_NotificationPreferences", Model)
                            </div>
                        </div>

                        <!-- Filter and Sort Preferences -->
                        <div class="mb-4">
                            <button type="button" class="toggle-preferences flex w-full items-center justify-between rounded-md bg-gray-100 px-4 py-2 focus:outline-none" data-target="#filterandsort-preferences-content" data-icon="#filterandsort-icon">
                                <span class="text-xl font-medium">Filter and Sort</span>
                                <svg id="filterandsort-icon" class="h-6 w-6 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                </svg>
                            </button>

                            <div id="filterandsort-preferences-content" class="mt-1 hidden rounded-md border border-gray-200 bg-gray-50 p-4">
                                @await Html.PartialAsync("_NotificationPreferences", Model)
                            </div>
                        </div>
                    </form>
                </div>

                <!-- SECTION: Password -->
                <div id="password-section" class="tab-content hidden">
                    <div class="mb-4 flex items-center justify-between">
                        <h2 class="mb-4 text-2xl font-semibold">Change Password</h2>
                        <div class="flex space-x-2">
                            <button type="button" id="cancel-password-btn" class="hidden rounded-md bg-[#6c757d] px-3 py-2 font-medium text-white hover:bg-[#939BA2]">
                                Cancel
                            </button>
                            <button type="button" id="save-password-btn" class="hidden rounded-md bg-[#7A1515] px-4 py-2 font-semibold text-white hover:bg-[#A53D3D]">
                                Update
                            </button>
                        </div>
                    </div>
                    <form id="password-form">
                        <div class="mb-4">
                            <label for="oldPassword" class="mb-2 block text-gray-700">Old Password</label>
                            <input 
                                type="password" 
                                class="w-full rounded-md border border-gray-300 p-2 pr-10 hover:border-[#7A1515] focus:outline-none focus:ring-2 focus:ring-[#991b1b] focus:border-transparent" 
                                id="oldPassword" 
                                name="OldPassword" />
                            <span id="old-password-validation-message" class="hidden text-sm text-red-600"></span>
                        </div>
                        <div class="mb-4">
                            <label for="newPassword" class="mb-2 block text-gray-700">New Password</label>
                            <input 
                                type="password" 
                                class="w-full rounded-md border border-gray-300 p-2 pr-10 hover:border-[#7A1515] focus:outline-none focus:ring-2 focus:ring-[#991b1b] focus:border-transparent" 
                                id="newPassword" 
                                name="NewPassword" />
                            <span id="new-password-validation-message" class="hidden text-sm text-red-600"></span>
                        </div>
                        <div class="mb-4">
                            <label for="confirmNewPassword" class="mb-2 block text-gray-700">Confirm New Password</label>
                            <input 
                                type="password" 
                                class="w-full rounded-md border border-gray-300 p-2 pr-10 hover:border-[#7A1515] focus:outline-none focus:ring-2 focus:ring-[#991b1b] focus:border-transparent" 
                                id="confirmNewPassword" 
                                name="ConfirmNewPassword" />
                            <span id="confirm-password-validation-message" class="hidden text-sm text-red-600"></span>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Values passed to the JS files -->
<div id="tempDataContainer" data-success="@TempData["SuccessMessage"]" data-error="@TempData["ErrorMessage"]"></div>
<input type="hidden" id="baseUrl" value="@Url.Action("GetAllUsers", "User")" />
<input type="hidden" id="resetUrl" value="@Url.Action("ResetPassword", "User")" />
<input type="hidden" id="deleteUrl" value="@Url.Action("Delete", "User")" />

@section Scripts {
    <script src="~/js/toastrNotification.js"></script>
    <script>
        document.getElementById('profile-picture').addEventListener('change', function () {
            const file = this.files[0];
            const saveClearButtons = document.getElementById('save-clear-buttons');
            const profilePicturePreview = document.getElementById('profile-picture-preview');
    
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    profilePicturePreview.setAttribute('src', e.target.result);
                };
                reader.readAsDataURL(file);
                saveClearButtons.classList.remove('hidden');
            }
        });

        document.getElementById('clear-profile-btn').addEventListener('click', function () {
            document.getElementById('profile-picture-preview').setAttribute('src', 'https://via.placeholder.com/150');
            document.getElementById('save-clear-buttons').classList.add('hidden');
            document.getElementById('profile-picture').value = '';
        });

        document.getElementById('save-profile-btn').addEventListener('click', function () {
            alert('Profile picture saved successfully!');
            document.getElementById('save-clear-buttons').classList.add('hidden');
        });
    </script>
    <script>
        const tabs = document.querySelectorAll('.tab-btn');
        const contents = document.querySelectorAll('.tab-content');

        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Remove active class from all tabs
                tabs.forEach(btn => btn.classList.remove('active-tab', 'bg-gray-100'));
                // Hide all content
                contents.forEach(content => content.classList.add('hidden'));

                // Show the target content and add active class
                const target = tab.getAttribute('data-target');
                document.getElementById(target).classList.remove('hidden');
                tab.classList.add('active-tab', 'bg-gray-100');
            });
        });

        // Default active tab (Profile section)
        document.querySelector('.tab-btn[data-target="profile-section"]').click();
    </script>
    <script>
        function formChanged(formId) {
            const form = document.getElementById(formId);
            const initialFormData = new FormData(form);
            let initialValues = {};
            initialFormData.forEach((value, key) => {
                initialValues[key] = value;
            });

            return function () {
                const currentFormData = new FormData(form);
                for (let [key, value] of currentFormData.entries()) {
                    if (initialValues[key] !== value) {
                        return true;
                    }
                }
                return false;
            };
        }

        const hasPreferencesFormChanged = formChanged('preferences-form');
        const hasPasswordFormChanged = formChanged('password-form');

        // Preferences Form Change Detection
        document.querySelectorAll('#preferences-form input, #preferences-form select, #preferences-form textarea').forEach(input => {
            input.addEventListener('input', function () {
                const saveButton = document.getElementById('save-preferences-btn');
                const cancelButton = document.getElementById('cancel-preferences-btn');
                if (hasPreferencesFormChanged()) {
                    saveButton.classList.remove('hidden');
                    cancelButton.classList.remove('hidden');
                } else {
                    saveButton.classList.add('hidden');
                    cancelButton.classList.add('hidden');
                }
            });
        });

        document.getElementById('cancel-preferences-btn').addEventListener('click', function () {
            const form = document.getElementById('preferences-form');
            form.reset();

            const initialFormData = new FormData(form);
            let initialValues = {};
            initialFormData.forEach((value, key) => {
                initialValues[key] = value;
            });

            for (let [key, value] of Object.entries(initialValues)) {
                const element = form.querySelector(`[name="${key}"]`);
                if (element && (element.tagName === 'SELECT' || element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {
                    element.value = value;
                }
            }

            document.getElementById('save-preferences-btn').classList.add('hidden');
            document.getElementById('cancel-preferences-btn').classList.add('hidden');
            toastr.info("No changes were made");
        });

        document.getElementById('save-preferences-btn').addEventListener('click', function () {
            const form = document.getElementById('preferences-form');
            const formData = new FormData(form);

            fetch('@Url.Action("UpdateUserProfile")', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        toastr.error('Failed to update preferences.');
                    }
                })
                .catch(error => {
                    toastr.error('An error occurred. Please try again.');
                });
        });

        // Password Form Validation and Change Detection
        const passwordForm = document.getElementById('password-form');
        const oldPasswordInput = passwordForm.querySelector('#oldPassword');
        const newPasswordInput = passwordForm.querySelector('#newPassword');
        const confirmNewPasswordInput = passwordForm.querySelector('#confirmNewPassword');
        const oldPasswordValidation = document.getElementById('old-password-validation-message');
        const newPasswordValidation = document.getElementById('new-password-validation-message');
        const confirmPasswordValidation = document.getElementById('confirm-password-validation-message');

        let oldPasswordTouched = false;
        let newPasswordTouched = false;
        let confirmPasswordTouched = false;

        function validatePasswordInput(input) {
            let isValid = true;
            const oldPasswordValue = oldPasswordInput.value;
            const newPasswordValue = newPasswordInput.value;
            const confirmNewPasswordValue = confirmNewPasswordInput.value;

            if (input === oldPasswordInput || oldPasswordTouched) {
                if (!oldPasswordValue) {
                    oldPasswordValidation.textContent = 'Old password cannot be empty.';
                    oldPasswordValidation.classList.remove('hidden');
                    isValid = false;
                } else {
                    oldPasswordValidation.classList.add('hidden');
                }
            }

            if ((input === newPasswordInput || newPasswordTouched) && oldPasswordTouched) {
                if (!newPasswordValue) {
                    newPasswordValidation.textContent = 'New password cannot be empty.';
                    newPasswordValidation.classList.remove('hidden');
                    isValid = false;
                } else if (newPasswordValue.length < 6) {
                    newPasswordValidation.textContent = 'New password must be at least 6 characters long.';
                    newPasswordValidation.classList.remove('hidden');
                    isValid = false;
                } else if (newPasswordValue === oldPasswordValue) {
                    newPasswordValidation.textContent = 'Cannot be the same as the old password.';
                    newPasswordValidation.classList.remove('hidden');
                    isValid = false;
                } else {
                    newPasswordValidation.classList.add('hidden');
                }
            }

            if ((input === confirmNewPasswordInput || confirmPasswordTouched) && newPasswordTouched) {
                if (newPasswordValue !== confirmNewPasswordValue) {
                    confirmPasswordValidation.textContent = 'Does not match with new password.';
                    confirmPasswordValidation.classList.remove('hidden');
                    isValid = false;
                } else {
                    confirmPasswordValidation.classList.add('hidden');
                }
            }

            return isValid;
        }

        oldPasswordInput.addEventListener('input', () => {
            oldPasswordTouched = true;
            validatePasswordInput(oldPasswordInput);
            togglePasswordButtons();
        });

        newPasswordInput.addEventListener('input', () => {
            newPasswordTouched = true;
            validatePasswordInput(newPasswordInput);
            togglePasswordButtons();
        });

        confirmNewPasswordInput.addEventListener('input', () => {
            confirmPasswordTouched = true;
            validatePasswordInput(confirmNewPasswordInput);
            togglePasswordButtons();
        });

        function togglePasswordButtons() {
            const saveButton = document.getElementById('save-password-btn');
            const cancelButton = document.getElementById('cancel-password-btn');
            if (hasPasswordFormChanged()) {
                saveButton.classList.remove('hidden');
                cancelButton.classList.remove('hidden');
            } else {
                saveButton.classList.add('hidden');
                cancelButton.classList.add('hidden');
            }
        }

        document.getElementById('cancel-password-btn').addEventListener('click', function () {
            passwordForm.reset();
            oldPasswordValidation.classList.add('hidden');
            newPasswordValidation.classList.add('hidden');
            confirmPasswordValidation.classList.add('hidden');

            oldPasswordTouched = false;
            newPasswordTouched = false;
            confirmPasswordTouched = false;

            document.getElementById('save-password-btn').classList.add('hidden');
            document.getElementById('cancel-password-btn').classList.add('hidden');
            toastr.info("No changes were made");
        });

        document.getElementById('save-password-btn').addEventListener('click', function () {
            const isOldPasswordValid = validatePasswordInput(oldPasswordInput);
            const isNewPasswordValid = validatePasswordInput(newPasswordInput);
            const isConfirmPasswordValid = validatePasswordInput(confirmNewPasswordInput);

            if (!isOldPasswordValid || !isNewPasswordValid || !isConfirmPasswordValid) {
                return;
            }

            const formData = new FormData(passwordForm);

            fetch('@Url.Action("UpdatePassword")', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        toastr.error('Failed to update password.');
                    }
                })
                .catch(error => {
                    toastr.error('An error occurred. Please try again.');
                });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const toggleButtons = document.querySelectorAll('.toggle-preferences');

            toggleButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const targetContent = document.querySelector(this.dataset.target);
                    const targetIcon = document.querySelector(this.dataset.icon);

                    if (targetContent.classList.contains('hidden')) {
                        targetContent.classList.remove('hidden');
                        targetIcon.style.transform = 'rotate(180deg)';
                    } else {
                        targetContent.classList.add('hidden');
                        targetIcon.style.transform = 'rotate(0deg)';
                    }
                });
            });
        });
    </script>
}
